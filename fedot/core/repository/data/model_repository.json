{
  "metadata": {
	"sklearn_class": {
	  "tasks": "[TaskTypesEnum.classification]",
	  "input_type": "[DataTypesEnum.table, DataTypesEnum.table]",
	  "output_type": "[DataTypesEnum.table, DataTypesEnum.table]",
	  "accepted_node_types": ["any"],
	  "forbidden_node_types": "[]",
	  "strategies": ["fedot.core.operations.evaluation.evaluation", "SkLearnClassificationStrategy"],
	  "tags": ["ml", "sklearn"],
	  "description": "Implementations of the classification models from scikit-learn framework"
	},
	"sklearn_regr": {
	  "tasks": "[TaskTypesEnum.regression]",
	  "input_type": "[DataTypesEnum.table, DataTypesEnum.ts_lagged_table]",
	  "output_type": "[DataTypesEnum.table, DataTypesEnum.forecasted_ts]",
	  "accepted_node_types": ["any"],
	  "forbidden_node_types": "[]",
	  "strategies": ["fedot.core.operations.evaluation.evaluation", "SkLearnRegressionStrategy"],
	  "tags": ["ml", "sklearn", "composition"],
	  "description": "Implementations of the regression models from scikit-learn framework"
	},
	"sklearn_clust": {
	  "tasks": "[TaskTypesEnum.clustering]",
	  "input_type": "[DataTypesEnum.table]",
	  "output_type": "[DataTypesEnum.table]",
	  "accepted_node_types": ["any"],
	  "forbidden_node_types": "[]",
	  "strategies": ["fedot.core.operations.evaluation.evaluation", "SkLearnClusteringStrategy"],
	  "tags": ["ml", "sklearn"],
	  "description": "Implementations of the clustering models from scikit-learn framework"
	},
	"data_model": {
	  "tasks": "[TaskTypesEnum.regression, TaskTypesEnum.classification, TaskTypesEnum.ts_forecasting]",
	  "input_type": "[DataTypesEnum.table, DataTypesEnum.ts]",
	  "output_type": "[DataTypesEnum.table, DataTypesEnum.ts]",
	  "strategies": ["fedot.core.operations.evaluation.data_evaluation", "DataModellingStrategy"],
	  "tags": ["without_preprocessing", "data_model"],
	  "description": "Implementations of the models for the data injection into features of secondary nodes"
	},
	"ts_data_model": {
	  "tasks": "[TaskTypesEnum.ts_forecasting]",
	  "input_type": "[DataTypesEnum.ts]",
	  "output_type": "[DataTypesEnum.ts]",
	  "strategies": ["fedot.core.operations.evaluation.data_evaluation", "DataModellingStrategy"],
	  "tags": ["without_preprocessing"],
	  "description": "Implementations of the models for the data modification during time series forecasting"
	},
	"dim_red_data_model": {
	  "tasks": "[TaskTypesEnum.classification, TaskTypesEnum.regression]",
	  "input_type": "[DataTypesEnum.table]",
	  "output_type": "[DataTypesEnum.table]",
	  "strategies": ["fedot.core.operations.evaluation.data_evaluation", "DataModellingStrategy"],
	  "tags": ["without_preprocessing", "data_model"],
	  "description": "Implementations of the models for the feature preprocessing (dimensionality reduction, etc)"
	},
	"keras_forecasting": {
	  "tasks": "[TaskTypesEnum.ts_forecasting]",
	  "input_type": "[DataTypesEnum.ts_lagged_table]",
	  "output_type": "[DataTypesEnum.forecasted_ts]",
	  "strategies": ["fedot.core.operations.evaluation.keras_eval", "KerasForecastingStrategy"],
	  "tags": ["nn"],
	  "description": "Implementations of the keras-based neural models for the time series forecasting"
	},
	"text_classification": {
	  "tasks": "[TaskTypesEnum.classification]",
	  "input_type": "[DataTypesEnum.text]",
	  "output_type": "[DataTypesEnum.table]",
	  "forbidden_node_types": ["secondary"],
	  "strategies": ["fedot.core.operations.evaluation.vectorize", "VectorizeStrategy"],
	  "tags": ["nlp", "non-default"],
	  "description": "Text classification"
	},
	"ts_model": {
	  "tasks": "[TaskTypesEnum.regression, TaskTypesEnum.ts_forecasting]",
	  "input_type": "[DataTypesEnum.ts]",
	  "output_type": "[DataTypesEnum.table]",
	  "strategies": ["fedot.core.operations.evaluation.evaluation", "TsForecastingStrategy"],
	  "tags": ["time_series"],
	  "description": "Implementations of the time series models"
	}
  },
  "operations": {
	"logit": {
	  "meta": "sklearn_class",
	  "tags": ["simple", "linear", "interpretable"]
	},
	"lda": {
	  "meta": "sklearn_class",
	  "tags": ["discriminant", "linear"]
	},
	"qda": {
	  "meta": "sklearn_class",
	  "tags": ["discriminant", "quadratic"]
	},
	"dt": {
	  "meta": "sklearn_class",
	  "tags": ["tree", "interpretable"]
	},
	"rf": {
	  "meta": "sklearn_class"
	},
	"mlp": {
	  "meta": "sklearn_class",
	  "tags": ["neural"]
	},
	"knn": {
	  "meta": "sklearn_class",
	  "tags": ["simple"]
	},
	"svc": {
	  "meta": "sklearn_class",
	  "tags": ["no_prob", "expensive"]
	},
	"xgboost": {
	  "meta": "sklearn_class",
	  "tags": ["boosting"]
	},
	"bernb": {
	  "meta": "sklearn_class",
	  "tags": ["bayesian"]
	},
	"linear": {
	  "meta": "sklearn_regr",
	  "tags": ["simple", "linear", "interpretable"]
	},
	"lasso": {
	  "meta": "sklearn_regr",
	  "tags": ["simple", "linear", "interpretable"]
	},
	"ridge": {
	  "meta": "sklearn_regr",
	  "tags": ["simple", "linear", "interpretable"]
	},
	"xgbreg": {
	  "meta": "sklearn_regr",
	  "tags": ["boosting"]
	},
	"adareg": {
	  "meta": "sklearn_regr",
	  "tags": ["boosting"]
	},
	"gbr": {
	  "meta": "sklearn_regr",
	  "tags": ["boosting"]
	},
	"knnreg": {
	  "meta": "sklearn_regr",
	  "tags": ["simple"]
	},
	"dtreg": {
	  "meta": "sklearn_regr",
	  "tags": ["tree", "interpretable"]
	},
	"treg": {
	  "meta": "sklearn_regr",
	  "tags": ["tree"]
	},
	"rfr": {
	  "meta": "sklearn_regr"
	},
	"svr": {
	  "meta": "sklearn_regr"
	},
	"sgdr": {
	  "meta": "sklearn_regr"
	},
	"arima": {
	  "meta": "ts_model",
	  "tags": ["simple", "interpretable"]
	},
	"ar": {
	  "meta": "ts_model",
	  "tags": ["simple", "interpretable"]
	},
	"kmeans": {
	  "meta": "sklearn_clust"
	},
	"direct_data_model": {
	  "meta": "data_model"
	},
	"trend_data_model": {
	  "meta": "ts_data_model",
	  "tags": ["affects_target", "decomposition"]
	},
	"residual_data_model": {
	  "meta": "ts_data_model",
	  "tags": ["affects_target", "decomposition"]
	},
	"pca_data_model": {
	  "meta": "dim_red_data_model",
	  "tags": ["linear"]
	},
	"lstm": {
	  "meta": "keras_forecasting",
	  "tags": ["deep"]
	},
	"multinb": {
	  "meta": "sklearn_class",
	  "tags": ["bayesian", "non-default"]
	},
    "tfidf": {
      "meta": "text_classification",
	  "tags": ["text", "non-default"]
    }
  }
}